import net.minecrell.pluginyml.bukkit.BukkitPluginDescription.Permission.*

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    kotlin("jvm") version "1.8.0"

    `maven-publish`

    id("net.minecrell.plugin-yml.bukkit") version "0.5.2"
    id("com.github.johnrengelman.shadow") version "2.0.4"
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }

    maven {
        url = uri("https://papermc.io/repo/repository/maven-public/")
    }

    maven {
        url = uri("https://repo.codemc.org/repository/maven-public/")
    }

    maven {
        url = uri("https://jitpack.io")
    }

    maven {
        url = uri("https://m2.dv8tion.net/releases")
    }

    maven {
        url = uri("https://repo.opencollab.dev/maven-snapshots")
    }

    maven {
        url = uri("https://repo.opencollab.dev/maven-releases")
    }

    maven {
        url = uri("https://repo.phoenix616.dev/")
    }

    maven {
        url = uri("https://nexus.scarsz.me/content/groups/public/")
    }
    maven {
        url = uri("https://repo.codemc.io/repository/maven-snapshots/")
    }
    maven {
        name = "citizens"
        url = uri("http://repo.citizensnpcs.co/")
        isAllowInsecureProtocol = true
    }
}

dependencies {
    compileOnly("net.skinsrestorer:skinsrestorer:14.1.4-SNAPSHOT")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.6.10")
    compileOnly("io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT")
    compileOnly("com.github.MilkBowl:VaultAPI:1.7")
    compileOnly("net.luckperms:api:5.4")
    compileOnly("de.tr7zw:item-nbt-api-plugin:2.11.1")
    compileOnly("com.gmail.filoghost.holographicdisplays:holographicdisplays-api:2.4.0")
    compileOnly("com.github.koca2000:NoteBlockAPI:1.6.1")
    compileOnly("net.citizensnpcs:citizensapi:2.0.29-SNAPSHOT")
    compileOnly("com.github.ucchyocean.lc:LunaChat:3.0.16")

    library("com.google.code.gson", "gson", "2.8.7")
    bukkitLibrary("com.google.code.gson", "gson", "2.8.7")
}

group = "io.misskey.mc.core"
version = "4.0.0-dev.1"
description = "A Core System Plugin for Misskey.io Minecraft."
java.sourceCompatibility = JavaVersion.VERSION_17

bukkit {
    name = "IomcCore"
    main = "io.misskey.mc.core.IomcCorePlugin"
    version = getVersion().toString()
    apiVersion = "1.19"
    softDepend = listOf("Citizens")
    depend = listOf("Vault", "DiscordSRV", "HolographicDisplays", "NoteBlockAPI")

    commands {
        register("omikuji") {
            description = "おみくじを引きます。マイクラ内で1日に1回まで引けて、100エビパワーを消費します。"
            usage = "/omikuji"
        }
        register("givemobball") {
            description = "モブボールを入手します。"
            usage = "/givemobball <playerName> [amount=1] [type:normal|super|ultra]"
            permission = "iomccore.command.givemobball"
        }
        register("cat") {
            description = "CATモードの有効/無効を切り替えるか、現在のモードを取得します。"
            usage = "/cat [on/off]"
            permission = "iomccore.command.cat"
        }
        register("hub") {
            description = "ロビーに移動します。"
            usage = "/hub help"
        }
        register("xtp") {
            description = "保存された過去位置を用いてテレポートします。"
            usage = "/xtp <world> [player]"
            permission = "iomccore.command.xtp"
            aliases = listOf("xteleport")
        }
        register("xtpreset") {
            description = "xtpコマンドで用いる過去位置をリセットします。プレイヤーを省略した場合、全員分をリセットします。"
            usage = "/xtpreset <world> [player]"
            permission = "iomccore.command.xtpreset"
            aliases = listOf("xteleportreset")
        }
        register("xphone") {
            description = "X Phoneメニューを開くか、アイテム「X Phone」をもらう"
            usage = "/xphone [get]"
            permission = "iomccore.command.xphone"
            aliases = listOf("phone", "p")
        }
        register("live") {
            description = "ライブ配信モードを切り替える"
            usage = "/live <on/off>"
            permission = "iomccore.command.live"
        }
        register("epshop") {
            description = "エビパワーストアを開きます。"
            usage = "/epshop"
            permission = "iomccore.command.epshop"
        }
        register("hint") {
            description = "ヒントメニューを開きます。"
            usage = "/hint [hint-id]"
            permission = "iomccore.command.hint"
        }
        register("counter") {
            description = "カウンター管理"
            usage = "/counter <register/unregister/cancel/bind/info/list/resetdaily>"
            permission = "iomccore.command.counter"
        }
        register("ranking") {
            description = "ランキング管理"
            usage = "/ranking <create/delete/query/list/set/unset/hologram>"
            permission = "iomccore.command.ranking"
        }
        register("countdown") {
            description = "カウントダウンを表示します。"
            usage = "/countdown <秒数> [プレイヤー名...]"
            permission = "iomccore.command.countdown"
        }
        register("qchat") {
            description = "QuickChatの設定"
            usage = "/qchat <register/unregister/list>"
            permission = "iomccore.command.qchat"
        }
        register("epeffectshop") {
            description = "エビパワードラッグストアを開きます。"
            usage = "/epeffectshop"
            permission = "iomccore.command.epeffectshop"
        }
        register("xreload") {
            description = "X-Coreの設定をリロードします。"
            usage = "/xreload"
            permission = "iomccore.command.xreload"
        }
        register("xdebug") {
            description = "X-Core Debug Command"
            usage = "/xdebug"
            permission = "iomccore.command.xdebug"
        }
        register("stamp") {
            description = "スタンプラリー用コマンド"
            usage = "/stamp listDonePlayers"
            permission = "iomccore.command.stamp"
        }
        register("firework") {
            description = "花火大会用コマンド"
            usage = "/firework <run|center> <scriptName>"
            permission = "iomccore.command.firework"
        }
        register("farmfest") {
            description = "秋農業祭り用コマンド"
            usage = "/farmfest <clearFarm|add|init|start|stop>"
            permission = "iomccore.command.farmfest"
        }
        register("candystore") {
            description = "アメストアを開きます。"
            usage = "/candystore"
            permission = "iomccore.command.candystore"
        }
        register("__core_gui_event__") {
            description = "?"
            usage = "?"
        }
    }

    permissions {
        register("iomccore.command.pvp") {
            default = Default.OP
        }
        register("iomccore.command.givecustomitem") {
            default = Default.OP
        }
        register("iomccore.command.givemobball") {
            default = Default.OP
        }
        register("iomccore.command.cat") {
            default = Default.OP
        }
        register("iomccore.command.debug") {
            default = Default.OP
        }
        register("iomccore.command.menu") {
            default = Default.OP
        }
        register("iomccore.command.live") {
            default = Default.OP
        }
        register("iomccore.command.counter") {
            default = Default.OP
        }
        register("iomccore.command.ranking") {
            default = Default.OP
        }
        register("iomccore.command.countdown") {
            default = Default.OP
        }
        register("iomccore.command.qchat") {
            default = Default.OP
        }
        register("iomccore.command.xreload") {
            default = Default.OP
        }
        register("iomccore.command.xdebug") {
            default = Default.OP
        }
        register("iomccore.command.stamp") {
            default = Default.OP
        }
        register("iomccore.stamp.create") {
            default = Default.OP
        }
        register("iomccore.stamp.destroy") {
            default = Default.OP
        }
    }
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    kotlinOptions {
        jvmTarget = "17"
        incremental = true
    }
}

tasks.jar {
    archiveFileName.set("${project.name}.jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
}
